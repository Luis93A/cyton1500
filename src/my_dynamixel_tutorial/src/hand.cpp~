#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>

int main(int argc, char** argv)
{
	ros::init(argc, argv, "my_skeleton_tf_listener");
	
	ros::NodeHandle node;

/* publisher declaration*/
	
	ros::Publisher left_hand_joint = node.advertise<geometry_msgs::Point>("left_hand_joint", 1);

/* listener */
	tf::TransformListener listener;
	
	ros::Rate rate(50.0); /* frequency of operation*/
	
	while (node.ok())
	{
		// Transforms declared for each joint
		tf::StampedTransform  transform_left_hand;
		try
		{
/* each joint frame to reference frame transforms */
			
			listener.lookupTransform("/left_hand_1", "/openni_depth_frame",ros::Time(0), transform_left_hand);
			
			
		}
			catch (tf::TransformException &ex) 
		{
			ROS_ERROR("%s",ex.what());
			ros::Duration(0.10).sleep();
			continue;
		}
	
/* geometry points declaration for storing 3D coordinates of joints and then published later */
		geometry_msgs::Point left_hand_pose;
		
/* joint position extraction and store*/
		
/* left hand joint*/
		left_hand_pose.x = transform_left_hand.getOrigin().x();
		left_hand_pose.y = transform_left_hand.getOrigin().y();
		left_hand_pose.z = transform_left_hand.getOrigin().z();
		
/* joint positions publish*/
		
		left_hand_joint.publish(left_hand_pose);
		
		left_hand_pose.x = left_hand_pose.x +2;
		std::cout<<"x :" << left_hand_pose.x <<std::endl;
		
		rate.sleep();
	}
	
	return 0;

};

