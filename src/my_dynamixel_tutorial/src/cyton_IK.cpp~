/* 
* Author: Prasanna Kumar Routray
*/

#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>

// ROS synchronization headers
#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <message_filters/time_synchronizer.h>

// Message publication
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float64.h"
#include <std_msgs/Float64.h>
#include <sstream>
#include <fstream>
#include <iostream>
#include <dynamixel_controllers/SetSpeed.h>

#include "ros/ros.h"
#include "std_msgs/String.h"
#include "std_msgs/Float64.h"
#include "std_msgs/Int32.h"
#include "std_msgs/Int8.h"
#include "std_msgs/Empty.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/PoseStamped.h"

#include "dynamixel_controllers/SetSpeed.h"
#include "dynamixel_controllers/SetComplianceSlope.h"
#include "dynamixel_msgs/JointState.h"
#include "dynamixel_msgs/MotorStateList.h"

#include <sensor_msgs/JointState.h>


#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <stdio.h>                                         // for in-/output
#include <string.h>                                        // strcat
#include <fcntl.h>                                         // for 'O_RDONLY' deklaration
#include <termios.h>                                       // for serial

//Include system headers
#include <cstring>
#include <iostream>
#include <cstdio>

#include <sstream>
//#include <math.h>
//#include <algorithm>

#include <vector>

///////////////////////////
#define SHM_SIZE 1024
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/time.h>
#include <errno.h>

#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>
#include <sys/time.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/ioctl.h>


using namespace std;
using namespace sensor_msgs;
using namespace message_filters;

#include <ros/ros.h>
// ROS synchronization headers
#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <message_filters/time_synchronizer.h>
// MoveIt!


#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>

// Message publication
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float64.h"
#include <std_msgs/Float64.h>
#include <sstream>



using namespace std;
using namespace message_filters;

// publisher declaration
ros::Publisher jointIkData;

void callback(const std_msgs::Float32MultiArray::ConstPtr& msg1, const std_msgs::Float32MultiArray::ConstPtr& msg2)
{
	//std_msgs::Float32MultiArray jd;
	//// data clear 
	//jd.data.clear();
    
    ///**
		//Setting up to start using the RobotModel class is very easy. In general, you will find that most higher-level components will
		//return a shared pointer to the RobotModel. You should always use that when possible. In our case, we will start with such a 
		//shared pointer and discuss only the basic API. You can have a look at the actual code API for these classes to get more
		//information about how to use more features provided by these classes.
	//*/
	
	///**
		//We will start by instantiating a `RobotModelLoader`_ object, which will look up
		//the robot description on the ROS parameter server and construct a :moveit_core:`RobotModel` for us to use.
		//.. _RobotModelLoader: http://docs.ros.org/api/moveit_ros_planning/html/classrobot__model__loader_1_1RobotModelLoader.html
	//*/

	//robot_model_loader::RobotModelLoader robot_model_loader("robot_description");
	//robot_model::RobotModelPtr kinematic_model = robot_model_loader.getModel();
	//ROS_INFO("Model frame: %s", kinematic_model->getModelFrame().c_str());
	
	///**
		//Using the :moveit_core:`RobotModel`, we can construct a :moveit_core:`RobotState` that maintains the configuration
		//of the robot. We will set all joints in the state to their default values. We can then get a :moveit_core:`JointModelGroup`, 
		//which represents the robot model for a particular group, here we are using the "arm" (cyton_gamma_1500 Robot) .
	//*/

	//robot_state::RobotStatePtr kinematic_state(new robot_state::RobotState(kinematic_model));
	//kinematic_state->setToDefaultValues();
	//const robot_state::JointModelGroup* joint_model_group = kinematic_model->getJointModelGroup("arm");
	
	//const std::vector<std::string> &joint_names = joint_model_group->getJointModelNames();
	
	//ros::Duration(2).sleep();
	
	///**
	//// Get Joint Values
	//// ^^^^^^^^^^^^^^^^
	//// We can retreive the current set of joint values stored in the state for the right arm.
	//*/
	
	//std::vector<double> joint_values;
	//kinematic_state->copyJointGroupPositions(joint_model_group, joint_values);
	
	//for(std::size_t i = 0; i < joint_names.size(); ++i)
	//{
		////ROS_INFO("Joint %s: %f", joint_names[i].c_str(), joint_values[i]);
	//}

	///**
	//// Forward Kinematics
	//// ^^^^^^^^^^^^^^^^^^
	//// Now, we can compute forward kinematics for a set of random joint
	//// values. Note that we would like to find the pose of the
	//// "r_wrist_roll_link" which is the most distal link in the
	//// "right_arm" of the robot.
	//*/
		
	//// initialization of joints
	//Eigen::VectorXd joints(8);
	//joints << msg2->data[0], msg2->data[1], msg2->data[2], msg2->data[3], msg2->data[4], msg2->data[5], msg2->data[6], msg2->data[7];
	
	//kinematic_state->setJointGroupPositions(joint_model_group, joints);
	
	//// end_effector_state declared
	//Eigen::Affine3d end_effector_state;
	
	//end_effector_state = kinematic_state->getGlobalLinkTransform("base_footprint");
	
	//// end_effector_state initialization 
	//Eigen::Matrix3d r;
	//r << 1, 0, 0,
		 //0, 1, 0,
		 //0, 0, 1; // fill rotation vector
	
	//double tx,ty,tz; 
	//// end-effector position
	//double tx_old;
	////if (tx==tx_old)
	////{
		////return 0;
	////}
	
	//// data from cyton_EE node for end-effector
	//tx= msg1->data[0];
	//ty= msg1->data[1];
	//tz= msg1->data[2];	
	
	//Eigen::Vector3d v;
	//v << tx, ty, tz; // fill translation vector

	//// affine3d matrix filled with both translation and rotation matrix
	//end_effector_state.translate(v);
	//end_effector_state.rotate(r);
	
	///** 
		//Print end-effector pose. 
		//Remember that this is in the model frame  
	//*/
	
	////ROS_INFO_STREAM("Translation: " << end_effector_state.translation());
	////ROS_INFO_STREAM("Rotation: " << end_effector_state.rotation());
	
	///**
	//// Inverse Kinematics
	//// ^^^^^^^^^^^^^^^^^^
	//// We can now solve inverse kinematics (IK) for the Cyton Gamma 1500 arm.
	//// To solve IK, we will need the following parameters:
	//1:- The desired pose of the end-effector (by default, this is the last link in the "cyton_gamma_1500_arm" chain)
	//2:- The number of attempts to be made at solving IK: 10
	//3:- The timeout for each attempt: 0.1 s
	//*/
	//bool found_ik = kinematic_state->setFromIK(joint_model_group, end_effector_state, 10, 0.1);
	
	///** 
		//Now, we can print out and use for hardware the IK solution (if found):
	//*/
	
	//if (found_ik)
	//{
		//kinematic_state->copyJointGroupPositions(joint_model_group, joint_values);
		
		//jd.data.push_back(joint_values[0]);
		//jd.data.push_back(joint_values[1]);
		//jd.data.push_back(joint_values[2]);
		//jd.data.push_back(joint_values[3]);
		//jd.data.push_back(joint_values[4]);
		//jd.data.push_back(joint_values[5]);
		//jd.data.push_back(joint_values[6]);
		////jd.data.push_back(joint_values[7]);
		
		//jointIkData.publish(jd);
	//}
	//else
	//{
		//ROS_INFO("NO Inverse Kinematics Solution Found");
		//ROS_INFO("Desired End-effector position is not inside WORKSPACE");
	//}

	///**
	//// Get the Jacobian
	//// ^^^^^^^^^^^^^^^^
	//// We can also get the Jacobian from the :moveit_core:`RobotState`.
	//*/
	//Eigen::Vector3d reference_point_position(0.0,0.0,0.0);
	//Eigen::MatrixXd jacobian;
	
	//kinematic_state->getJacobian(joint_model_group, kinematic_state->getLinkModel(joint_model_group->getLinkModelNames().back()), 
	//reference_point_position, jacobian);
	
	//tx_old=tx;
	
	//ros::Duration(30).sleep();
	////ROS_INFO_STREAM("Jacobian: " << jacobian);

}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "cyton_IK");
	//ros::AsyncSpinner spinner(2);
	//spinner.start();
	ros::NodeHandle nh;
	
	//ros::Subscriber sub = nh.subscribe ("/pubEE", 1, callback);
	
	
	// topic subscription
	message_filters::Subscriber<std_msgs::Float32MultiArray_<std::allocator<void> > > jointArmData_sub(nh, "/jointArmData", 1);
	message_filters::Subscriber<std_msgs::Float32MultiArray_<std::allocator<void> > > pubEE_sub(nh, "/pubEE", 1); 
	// synchronization policy
	typedef sync_policies::ApproximateTime<std_msgs::Float32MultiArray, std_msgs::Float32MultiArray> MySyncPolicy2;
	
	// The synchronized message header stamp

	// ApproximateTime takes a queue size as its constructor argument, hence MySyncPolicy(10)
	//Synchronizer<MySyncPolicy2> sync(MySyncPolicy2(150), jointArmData_sub, pubEE_sub);
	
	sync.registerCallback(boost::bind(&callback, _1, _2));

	jointIkData = nh.advertise<std_msgs::Float32MultiArray>("/jointIkData", 1);
	
	ros::spin();
	
	return 0;

}

