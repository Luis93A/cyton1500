#include <ros/ros.h>
#include <string>
#include <sensor_msgs/JointState.h>
#include <tf/transform_broadcaster.h>
#include <iostream>

#include "dynamixel_controllers/SetSpeed.h"
#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float64.h"
#include <std_msgs/Float64.h>

#include <ros/ros.h>

// Message publication
#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float64.h"
#include <iostream>
/** Headers */

#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>

/* ROS synchronization headers */
#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <message_filters/time_synchronizer.h>

/* Message publication */
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float64.h"
#include <std_msgs/Float64.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Twist.h>
#include <dynamixel_controllers/SetSpeed.h>
#include "std_msgs/String.h"
#include "std_msgs/Float64.h"
#include "std_msgs/Int32.h"
#include "std_msgs/Int8.h"
#include "std_msgs/Empty.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/PoseStamped.h"
#include <geometry_msgs/PointStamped.h>

/* dYnamixel */
#include "dynamixel_controllers/SetSpeed.h"
#include "dynamixel_controllers/SetComplianceSlope.h"
#include "dynamixel_msgs/JointState.h"
#include "dynamixel_msgs/MotorStateList.h"

#include <sensor_msgs/JointState.h>

#include "tf/transform_listener.h"
#include "tf/message_filter.h"
#include "message_filters/subscriber.h"


#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <stdio.h>                                         // for in-/output
#include <string.h>                                        // strcat
#include <fcntl.h>                                         // for 'O_RDONLY' deklaration
#include <termios.h>                                       // for serial

//Include system headers
#include <cstring>
#include <iostream>
#include <cstdio>

#include <sstream>
//#include <math.h>
//#include <algorithm>

#include <vector>

#define SHM_SIZE 1024
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/time.h>
#include <errno.h>

#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fcntl.h>
#include <sys/time.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/ioctl.h>

// Message publication
#include "std_msgs/Float32MultiArray.h"


#include <string>
#include <sensor_msgs/JointState.h>
#include <tf/transform_broadcaster.h>
ros::Publisher joint_pub;
using namespace std;
using namespace sensor_msgs;
using namespace message_filters;
void callback(const dynamixel_msgs::JointState::ConstPtr& msg1, const dynamixel_msgs::JointState::ConstPtr& msg2, 
						const dynamixel_msgs::JointState::ConstPtr& msg3, const dynamixel_msgs::JointState::ConstPtr& msg4, 
						const dynamixel_msgs::JointState::ConstPtr& msg5, const dynamixel_msgs::JointState::ConstPtr& msg6, 
						const dynamixel_msgs::JointState::ConstPtr& msg7, const dynamixel_msgs::JointState::ConstPtr& msg8 
						){

 tf::TransformBroadcaster broadcaster;
	geometry_msgs::TransformStamped cyton_trans;
	sensor_msgs::JointState joint_state;

	cyton_trans.header.frame_id = "base_footprint";
	cyton_trans.child_frame_id = "base_link";
	
	joint_state.name.resize(8);
	joint_state.position.resize(8);
	joint_state.name[0] ="shoulder_roll_joint";
	joint_state.name[1] ="shoulder_pitch_joint";
	joint_state.name[2] ="shoulder_yaw_joint";
	joint_state.name[3] ="elbow_pitch_joint";
	joint_state.name[4] ="elbow_yaw_joint";
	joint_state.name[5] ="wrist_pitch_joint";
	joint_state.name[6] ="wrist_roll_joint";
	joint_state.name[7] ="gripper_joint";



		joint_state.header.stamp = ros::Time::now();
	    joint_state.position[0] = msg1->current_pos;
	    joint_state.position[1] = msg2->current_pos;
	    joint_state.position[2] = msg3->current_pos;
	    joint_state.position[3] = msg4->current_pos;
	    joint_state.position[4] = msg5->current_pos;
	    joint_state.position[5] = msg6->current_pos;
	    joint_state.position[6] = msg7->current_pos;
			joint_state.position[7] = msg8->current_pos;
	// update transform
	    // (moving in a circle with radius=2)
	    cyton_trans.header.stamp = ros::Time::now();
	    cyton_trans.transform.translation.x = 0;
	    cyton_trans.transform.translation.y = 0;
	    cyton_trans.transform.translation.z = 0;
	    cyton_trans.transform.rotation = tf::createQuaternionMsgFromYaw(0);
	
	    //send the joint state and transform
	    joint_pub.publish(joint_state);
	    broadcaster.sendTransform(cyton_trans);
	
}


int main(int argc, char **argv)
{
	ros::init(argc, argv, "Rviz_Cyton_state_publisher");
   	ros::NodeHandle nh;

	message_filters::Subscriber<dynamixel_msgs::JointState> joint0_sub(nh, "/shoulder_roll_position_controller/state", 1); //_registered
	message_filters::Subscriber<dynamixel_msgs::JointState> joint1_sub(nh, "/shoulder_pitch_position_controller/state", 1); //_registered
	message_filters::Subscriber<dynamixel_msgs::JointState> joint2_sub(nh, "/shoulder_yaw_position_controller/state", 1); //_registered
	message_filters::Subscriber<dynamixel_msgs::JointState> joint3_sub(nh, "/elbow_pitch_position_controller/state", 1); //_registered
	message_filters::Subscriber<dynamixel_msgs::JointState> joint4_sub(nh, "/elbow_yaw_position_controller/state", 1); //_registered
	message_filters::Subscriber<dynamixel_msgs::JointState> joint5_sub(nh, "/wrist_pitch_position_controller/state", 1); //_registered
	message_filters::Subscriber<dynamixel_msgs::JointState> joint6_sub(nh, "/wrist_roll_position_controller/state", 1); //_registered
	message_filters::Subscriber<dynamixel_msgs::JointState> joint7_sub(nh, "/gripper_position_controller/state", 1); //_registered

/* synchronization policy*/
	typedef sync_policies::ApproximateTime<dynamixel_msgs::JointState, dynamixel_msgs::JointState, 
											dynamixel_msgs::JointState, dynamixel_msgs::JointState, 
											dynamixel_msgs::JointState, dynamixel_msgs::JointState, 
											dynamixel_msgs::JointState, dynamixel_msgs::JointState> MySyncPolicy; 
	
/** ApproximateTime takes a queue size as its constructor argument, hence MySyncPolicy(10)*/
	Synchronizer<MySyncPolicy> sync(MySyncPolicy(10), joint0_sub, joint1_sub, 
														joint2_sub, joint3_sub, 
														joint4_sub, joint5_sub, 
														joint6_sub, joint7_sub);
														
	sync.registerCallback(boost::bind(&callback, _1, _2, _3, _4, _5, _6, _7, _8));

	joint_pub = nh.advertise<sensor_msgs::JointState>("joint_states", 1);
   	
	
	ros::spin();
	return 0;
}

